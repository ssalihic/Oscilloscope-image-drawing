/**
  Generated Main Source File

  Company:
    Microchip Technology Inc.

  File Name:
    main.c

  Summary:
    This is the main file generated using PIC10 / PIC12 / PIC16 / PIC18 MCUs

  Description:
    This header file provides implementations for driver APIs for all modules selected in the GUI.
    Generation Information :
        Product Revision  :  PIC10 / PIC12 / PIC16 / PIC18 MCUs - 1.65.2
        Device            :  PIC16F1939
        Driver Version    :  2.00
*/

/*
    (c) 2018 Microchip Technology Inc. and its subsidiaries. 
    
    Subject to your compliance with these terms, you may use Microchip software and any 
    derivatives exclusively with Microchip products. It is your responsibility to comply with third party 
    license terms applicable to your use of third party software (including open source software) that 
    may accompany Microchip software.
    
    THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS". NO WARRANTIES, WHETHER 
    EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE, INCLUDING ANY 
    IMPLIED WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY, AND FITNESS 
    FOR A PARTICULAR PURPOSE.
    
    IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE, 
    INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND 
    WHATSOEVER RELATED TO THE SOFTWARE, HOWEVER CAUSED, EVEN IF MICROCHIP 
    HAS BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE FORESEEABLE. TO 
    THE FULLEST EXTENT ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL 
    CLAIMS IN ANY WAY RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT 
    OF FEES, IF ANY, THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS 
    SOFTWARE.
*/

#include <xc.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>

#pragma config FOSC=HS,WDTE=OFF,PWRTE=OFF,MCLRE=ON,CP=OFF,CPD=OFF,BOREN=OFF,CLKOUTEN=OFF
#pragma config IESO=OFF,FCMEN=OFF,WRT=OFF,VCAPEN=OFF,PLLEN=OFF,STVREN=OFF,LVP=OFF

#define _XTAL_FREQ 8000000

void port_init(){
    TRISD=0x00;
    TRISB=0x00;
    TRISC=0xBF;
}

void EUSART_Initialize()
{
    // Set the EUSART module to the options selected in the user interface.

    // ABDOVF no_overflow; SCKP Non-Inverted; BRG16 16bit_generator; WUE disabled; ABDEN disabled; 
    BAUDCON = 0x08;

    // SPEN enabled; RX9 8-bit; CREN enabled; ADDEN disabled; SREN disabled; 
    RCSTA = 0x90;

    // TX9 8-bit; TX9D 0; SENDB sync_break_complete; TXEN enabled; SYNC asynchronous; BRGH hi_speed; CSRC slave; 
    TXSTA = 0x24;

    // SPBRGL 207; 
    SPBRGL = 0xCF;

    // SPBRGH 0; 
    SPBRGH = 0x00;


}

bool EUSART_is_tx_ready()
{
    return (bool)(PIR1bits.TXIF && TXSTAbits.TXEN);
}

bool EUSART_is_rx_ready()
{
    return PIR1bits.RCIF;
}

bool EUSART_is_tx_done()
{
    return TXSTAbits.TRMT;
}

uint8_t EUSART_Read()
{
    while(!PIR1bits.RCIF)
    {
    }

    
    if(1 == RCSTAbits.OERR)
    {
        // EUSART error - restart

        RCSTAbits.CREN = 0; 
        RCSTAbits.CREN = 1; 
    }

    return RCREG;
}

void EUSART_Write(uint8_t txData)
{
    while(0 == PIR1bits.TXIF)
    {
    }

    TXREG = txData;    // Write the data byte to the USART.
}

char getch()
{
    return EUSART_Read();
}

void putch(char txData)
{
    EUSART_Write(txData);
}


#define on 0
#define off 1
/*
                         Main application
 */
typedef union {
    unsigned char byte;
    struct {
        unsigned b0:1, b1:1, b2:1, b3:1, b4:1, b5:1, b6:1, b7:1;
    };
} t_byte;

t_byte slika[80][10]={
{  0b11111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000},
{  0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000},
{  0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000},
{  0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000},
{  0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000},
{  0b11111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000},
{  0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000},
{  0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000},
{  0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000},
{  0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000},
{  0b11111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000},
{  0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000},
{  0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000},
{  0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000},
{  0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000},
{  0b11111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000},
{  0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000},
{  0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000},
{  0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000},
{  0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000},
{  0b11111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000},
{  0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000},
{  0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000},
{  0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000},
{  0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000},
{  0b11111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000},
{  0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000},
{  0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000},
{  0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000},
{  0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000},
{  0b11111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000},
{  0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000},
{  0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000},
{  0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000},
{  0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000},
{  0b11111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000},
{  0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000},
{  0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000},
{  0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000},
{  0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000}};


void ispisi(char *s){
    while(*s){
        EUSART_Write(*s);
        s++;
    }
}

void int_init(){
    RCIE=1;
    PEIE=1;
    GIE=1;
}


void primiSliku(){
    char temp;
    for(char i=0;i<40;i++){
        LATB=i;
        for(char j=0;j<5;j++){
            while(!EUSART_is_rx_ready());
                temp = EUSART_Read(); 
                slika[i][j].b7 = ((temp=='1') ? 1 : 0);
            while(!EUSART_is_rx_ready());
                temp = EUSART_Read();
                slika[i][j].b6 = ((temp=='1') ? 1 : 0);
            while(!EUSART_is_rx_ready());
                temp = EUSART_Read();
                slika[i][j].b5 = ((temp=='1') ? 1 : 0);
            while(!EUSART_is_rx_ready());
                temp = EUSART_Read();
                slika[i][j].b4 = ((temp=='1') ? 1 : 0);
            while(!EUSART_is_rx_ready());
                temp = EUSART_Read();
                slika[i][j].b3 = ((temp=='1') ? 1 : 0);
            while(!EUSART_is_rx_ready());
                temp = EUSART_Read();
                slika[i][j].b2 = ((temp=='1') ? 1 : 0);
            while(!EUSART_is_rx_ready());
                temp = EUSART_Read();
                slika[i][j].b1 = ((temp=='1') ? 1 : 0);
            while(!EUSART_is_rx_ready());
                temp = EUSART_Read();
                slika[i][j].b0 = ((temp=='1') ? 1 : 0);
        }
    }
}

void interrupt fija(){
    if(RCIE==1 && RCIF==1){
        LATD=0xff;
        primiSliku();
        RCIF=0;
    }
}


void main(void)
{
    // initialize the device
    port_init();
    EUSART_Initialize();
    int_init();
    
    char rxData;
    ispisi("test");
    TRISB=0x00; // y 
    TRISD=0x00; // x
       /* LATB=0x00;
        primiSliku();
        LATB=0xff;
        __delay_ms(500);*/
    while(1){
        for(char i=0;i<40;i++){
            LATB = i;
            for(char j=0;j<5;j++){
                char temp = j*8;
                if(slika[i][j].b7 == on){
                    LATD = temp; 
                }
                //if(EUSART_is_rx_ready())primiSliku();
                //__delay_us(2);
                if(slika[i][j].b6 == on){
                    LATD = temp + 1; 
                }
                //if(EUSART_is_rx_ready())primiSliku();
                //__delay_us(2);
                if(slika[i][j].b5 == on){
                    LATD = temp + 2; 
                }
                //if(EUSART_is_rx_ready())primiSliku();
                //__delay_us(2);
                if(slika[i][j].b4 == on){
                    LATD = temp + 3; 
                }
                //if(EUSART_is_rx_ready())primiSliku();
                //__delay_us(2);
                if(slika[i][j].b3 == on){
                    LATD = temp + 4; 
                }
                //if(EUSART_is_rx_ready())primiSliku();
                //__delay_us(2);
                if(slika[i][j].b2 == on){
                    LATD = temp + 5; 
                }
                //if(EUSART_is_rx_ready())primiSliku();
                //__delay_us(2);
                if(slika[i][j].b1 == on){
                    LATD = temp + 6; 
                }
                //if(EUSART_is_rx_ready())primiSliku();
                //__delay_us(2);
                if(slika[i][j].b0 == on){
                    LATD = temp + 7; 
                }
                //if(EUSART_is_rx_ready())primiSliku();
                //__delay_us(2);
            }
            i++; 
            LATB = i;
            for(char j=4;;j--){
                char temp = j*8;
                if(slika[i][j].b0 == on){
                    LATD = temp + 7; 
                }
                //if(EUSART_is_rx_ready())primiSliku();
                //__delay_us(2);
                if(slika[i][j].b1 == on){
                    LATD = temp + 6; 
                }
                //if(EUSART_is_rx_ready())primiSliku();
                //__delay_us(2);
                if(slika[i][j].b2 == on){
                    LATD = temp + 5; 
                }
                //if(EUSART_is_rx_ready())primiSliku();
                //__delay_us(2);
                if(slika[i][j].b3 == on){
                    LATD = temp + 4; 
                }
                //if(EUSART_is_rx_ready())primiSliku();
                //__delay_us(2);
                if(slika[i][j].b4 == on){
                    LATD = temp + 3; 
                }
                //if(EUSART_is_rx_ready())primiSliku();
                //__delay_us(2);
                if(slika[i][j].b5 == on){
                    LATD = temp + 2; 
                }
                //if(EUSART_is_rx_ready())primiSliku();
                //__delay_us(2);
                if(slika[i][j].b6 == on){
                    LATD = temp + 1; 
                }
                //if(EUSART_is_rx_ready())primiSliku();
                //__delay_us(2);
                if(slika[i][j].b7 == on){
                    LATD = temp; 
                }
                //if(EUSART_is_rx_ready())primiSliku();
                //__delay_us(2);
                if(j==0)break;
            }
        }
    }
    while(1)
        {
            // Logic to echo received data
            if(EUSART_is_rx_ready())
            {
                rxData = EUSART_Read();
                EUSART_Write(rxData);
                LATB=rxData;
            }
        }
}
/**
 End of File
*/